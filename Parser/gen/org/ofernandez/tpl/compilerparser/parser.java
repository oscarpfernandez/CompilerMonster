
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package org.ofernandez.tpl.compilerparser;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\005\000\002\004\005" +
    "\000\002\004\007\000\002\004\007\000\002\004\005\000" +
    "\002\004\003\000\002\006\002\000\002\006\003\000\002" +
    "\022\003\000\002\022\005\000\002\022\005\000\002\007" +
    "\003\000\002\007\005\000\002\005\003\000\002\005\005" +
    "\000\002\015\003\000\002\015\004\000\002\015\005\000" +
    "\002\015\005\000\002\016\005\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\005\000\002\016\006\000\002\016\005" +
    "\000\002\013\002\000\002\013\003\000\002\013\005\000" +
    "\002\013\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\004\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\004\000\002\012\005\000\002\012" +
    "\006\000\002\012\006\000\002\012\006\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\005\000\002\012\011\000\002\012\013\000\002" +
    "\012\011\000\002\011\003\000\002\011\005\000\002\011" +
    "\005\000\002\014\003\000\002\014\005\000\002\014\006" +
    "\000\002\017\002\000\002\017\003\000\002\010\003\000" +
    "\002\010\004\000\002\010\005\000\002\020\003\000\002" +
    "\020\005\000\002\020\006\000\002\020\004\000\002\020" +
    "\006\000\002\020\003\000\002\020\006\000\002\020\006" +
    "\000\002\020\005\000\002\021\005\000\002\021\007\000" +
    "\002\021\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\266\000\006\003\010\060\004\001\002\000\016\020" +
    "\ufff0\024\ufff0\026\121\030\ufff0\031\ufff0\032\ufff0\001\002" +
    "\000\004\002\001\001\002\000\006\002\uffff\030\267\001" +
    "\002\000\004\002\266\001\002\000\012\002\ufff8\022\ufff8" +
    "\030\ufff8\036\ufff8\001\002\000\006\031\012\032\013\001" +
    "\002\000\040\002\uffe1\005\062\017\066\021\055\022\uffe1" +
    "\030\uffe1\035\054\036\uffe1\041\065\051\063\052\070\055" +
    "\067\056\061\057\060\060\064\001\002\000\022\017\025" +
    "\021\017\023\024\042\014\043\022\044\015\045\020\060" +
    "\021\001\002\000\030\002\uffe8\020\uffe8\021\uffe8\022\uffe8" +
    "\024\uffe8\026\uffe8\030\uffe8\031\uffe8\033\uffe8\034\uffe8\036" +
    "\uffe8\001\002\000\030\002\uffe6\020\uffe6\021\uffe6\022\uffe6" +
    "\024\uffe6\026\uffe6\030\uffe6\031\uffe6\033\uffe6\034\uffe6\036" +
    "\uffe6\001\002\000\030\002\uffee\020\uffee\021\uffee\022\uffee" +
    "\024\uffee\026\035\030\uffee\031\uffee\033\uffee\034\uffee\036" +
    "\uffee\001\002\000\032\005\062\017\066\021\055\022\uffe1" +
    "\035\054\041\065\051\063\052\070\055\067\056\061\057" +
    "\060\060\064\001\002\000\030\002\uffe5\020\uffe5\021\uffe5" +
    "\022\uffe5\024\uffe5\026\uffe5\030\uffe5\031\uffe5\033\uffe5\034" +
    "\uffe5\036\uffe5\001\002\000\030\002\uffe9\020\uffe9\021\uffe9" +
    "\022\uffe9\024\uffe9\026\uffe9\030\uffe9\031\uffe9\033\uffe9\034" +
    "\uffe9\036\uffe9\001\002\000\030\002\uffe7\020\uffe7\021\uffe7" +
    "\022\uffe7\024\uffe7\026\uffe7\030\uffe7\031\uffe7\033\uffe7\034" +
    "\uffe7\036\uffe7\001\002\000\020\002\ufffc\022\ufffc\030\ufffc" +
    "\031\052\033\053\034\032\036\ufffc\001\002\000\006\024" +
    "\ufff7\060\004\001\002\000\024\017\025\020\030\021\017" +
    "\023\024\042\014\043\022\044\015\045\020\060\021\001" +
    "\002\000\010\020\034\026\035\034\uffee\001\002\000\006" +
    "\020\031\034\032\001\002\000\030\002\uffed\020\uffed\021" +
    "\uffed\022\uffed\024\uffed\026\uffed\030\uffed\031\uffed\033\uffed" +
    "\034\uffed\036\uffed\001\002\000\030\002\uffec\020\uffec\021" +
    "\uffec\022\uffec\024\uffec\026\uffec\030\uffec\031\uffec\033\uffec" +
    "\034\uffec\036\uffec\001\002\000\022\017\025\021\017\023" +
    "\024\042\014\043\022\044\015\045\020\060\021\001\002" +
    "\000\030\002\uffe4\020\uffe4\021\uffe4\022\uffe4\024\uffe4\026" +
    "\uffe4\030\uffe4\031\uffe4\033\uffe4\034\uffe4\036\uffe4\001\002" +
    "\000\030\002\uffea\020\uffea\021\uffea\022\uffea\024\uffea\026" +
    "\uffea\030\uffea\031\uffea\033\uffea\034\uffea\036\uffea\001\002" +
    "\000\022\017\025\021\017\023\024\042\014\043\022\044" +
    "\015\045\020\060\021\001\002\000\030\002\uffeb\020\uffeb" +
    "\021\uffeb\022\uffeb\024\uffeb\026\uffeb\030\uffeb\031\uffeb\033" +
    "\uffeb\034\032\036\uffeb\001\002\000\014\020\ufff2\024\ufff2" +
    "\026\ufff2\030\ufff2\032\050\001\002\000\012\020\ufff5\024" +
    "\ufff5\026\045\030\044\001\002\000\004\024\043\001\002" +
    "\000\006\020\ufff6\024\ufff6\001\002\000\030\002\uffe2\020" +
    "\uffe2\021\uffe2\022\uffe2\024\uffe2\026\uffe2\030\uffe2\031\uffe2" +
    "\033\uffe2\034\uffe2\036\uffe2\001\002\000\004\060\004\001" +
    "\002\000\004\060\004\001\002\000\006\020\ufff4\024\ufff4" +
    "\001\002\000\006\020\ufff3\024\ufff3\001\002\000\022\017" +
    "\025\021\017\023\024\042\014\043\022\044\015\045\020" +
    "\060\021\001\002\000\014\020\ufff1\024\ufff1\026\ufff1\030" +
    "\ufff1\034\032\001\002\000\040\002\uffe1\005\062\017\066" +
    "\021\055\022\uffe1\030\uffe1\035\054\036\uffe1\041\065\051" +
    "\063\052\070\055\067\056\061\057\060\060\064\001\002" +
    "\000\040\002\uffe1\005\062\017\066\021\055\022\uffe1\030" +
    "\uffe1\035\054\036\uffe1\041\065\051\063\052\070\055\067" +
    "\056\061\057\060\060\064\001\002\000\004\017\256\001" +
    "\002\000\032\005\062\017\066\021\055\022\uffe1\035\054" +
    "\041\065\051\063\052\070\055\067\056\061\057\060\060" +
    "\064\001\002\000\012\002\ufffb\022\ufffb\030\ufffb\036\ufffb" +
    "\001\002\000\062\002\uffe0\004\206\005\200\006\201\007" +
    "\203\010\165\011\170\012\205\013\167\014\204\015\176" +
    "\016\207\017\175\020\uffe0\021\174\022\uffe0\026\202\027" +
    "\173\030\uffe0\031\172\034\uffe0\036\uffe0\037\166\040\171" +
    "\001\002\000\062\002\uffc5\004\uffc5\005\uffc5\006\uffc5\007" +
    "\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5" +
    "\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\026\uffc5\027" +
    "\uffc5\030\uffc5\031\uffc5\034\uffc5\036\uffc5\037\uffc5\040\uffc5" +
    "\001\002\000\062\002\uffc6\004\uffc6\005\uffc6\006\uffc6\007" +
    "\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6" +
    "\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\026\uffc6\027" +
    "\uffc6\030\uffc6\031\uffc6\034\uffc6\036\uffc6\037\uffc6\040\uffc6" +
    "\001\002\000\030\005\062\017\211\021\055\035\054\041" +
    "\065\051\063\052\070\055\067\056\061\057\060\060\064" +
    "\001\002\000\004\017\240\001\002\000\062\002\uffc8\004" +
    "\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8" +
    "\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021" +
    "\uffc8\022\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\034\uffc8" +
    "\036\uffc8\037\uffc8\040\uffc8\001\002\000\030\005\062\017" +
    "\211\021\055\035\054\041\065\051\063\052\070\055\067" +
    "\056\061\057\060\060\064\001\002\000\032\005\062\017" +
    "\066\020\uffe1\021\055\035\054\041\065\051\063\052\070" +
    "\055\067\056\061\057\060\060\064\001\002\000\062\002" +
    "\uffc7\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7" +
    "\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020" +
    "\uffc7\021\uffc7\022\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7" +
    "\034\uffc7\036\uffc7\037\uffc7\040\uffc7\001\002\000\004\017" +
    "\071\001\002\000\006\020\ufff7\060\004\001\002\000\004" +
    "\020\073\001\002\000\004\021\074\001\002\000\026\003" +
    "\010\017\111\021\101\022\uffba\035\076\046\110\047\112" +
    "\050\105\053\075\060\106\001\002\000\004\021\160\001" +
    "\002\000\004\017\155\001\002\000\010\017\150\026\116" +
    "\033\151\001\002\000\016\017\uffc0\020\uffc0\021\143\026" +
    "\uffc0\027\144\033\uffc0\001\002\000\026\003\010\017\111" +
    "\021\101\022\uffba\035\076\046\110\047\112\050\105\053" +
    "\075\060\106\001\002\000\006\022\uffb9\036\uffb9\001\002" +
    "\000\010\022\uffb8\030\137\036\uffb8\001\002\000\004\022" +
    "\136\001\002\000\004\021\123\001\002\000\020\017\uffbd" +
    "\021\uffbd\026\121\027\uffbd\031\ufff0\032\ufff0\033\uffbd\001" +
    "\002\000\010\022\uffb5\030\uffb5\036\uffb5\001\002\000\036" +
    "\005\062\017\066\021\055\022\uffe1\030\uffe1\035\054\036" +
    "\uffe1\041\065\051\063\052\070\055\067\056\061\057\060" +
    "\060\064\001\002\000\006\017\111\060\113\001\002\000" +
    "\010\022\uffb0\030\uffb0\036\uffb0\001\002\000\016\017\uffbd" +
    "\020\uffbd\021\uffbd\026\uffbd\027\uffbd\033\uffbd\001\002\000" +
    "\006\020\115\026\116\001\002\000\012\017\uffbe\020\uffbe" +
    "\026\uffbe\033\uffbe\001\002\000\006\017\111\060\113\001" +
    "\002\000\012\017\uffbf\020\uffbf\026\uffbf\033\uffbf\001\002" +
    "\000\010\022\uffb2\030\uffb2\036\uffb2\001\002\000\004\060" +
    "\004\001\002\000\016\020\uffef\024\uffef\026\uffef\030\uffef" +
    "\031\uffef\032\uffef\001\002\000\032\005\062\017\066\021" +
    "\055\034\uffe1\035\054\041\065\051\063\052\070\055\067" +
    "\056\061\057\060\060\064\001\002\000\004\034\127\001" +
    "\002\000\004\022\126\001\002\000\010\022\uffaf\030\uffaf" +
    "\036\uffaf\001\002\000\030\003\010\017\111\021\101\022" +
    "\uffba\035\076\036\uffba\046\110\047\112\050\105\053\075" +
    "\060\106\001\002\000\006\022\uffac\036\131\001\002\000" +
    "\034\005\062\017\066\021\055\034\uffe1\035\054\041\065" +
    "\051\063\052\070\054\132\055\067\056\061\057\060\060" +
    "\064\001\002\000\004\034\134\001\002\000\004\022\uffab" +
    "\001\002\000\026\003\010\017\111\021\101\022\uffba\035" +
    "\076\046\110\047\112\050\105\053\075\060\106\001\002" +
    "\000\004\022\uffaa\001\002\000\062\002\uffc1\004\uffc1\005" +
    "\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1" +
    "\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022" +
    "\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\034\uffc1\036\uffc1" +
    "\037\uffc1\040\uffc1\001\002\000\030\003\010\017\111\021" +
    "\101\022\uffb7\035\076\036\uffb7\046\110\047\112\050\105" +
    "\053\075\060\106\001\002\000\006\022\uffb6\036\uffb6\001" +
    "\002\000\004\022\142\001\002\000\010\022\uffad\030\uffad" +
    "\036\uffad\001\002\000\032\005\062\017\066\021\055\022" +
    "\uffe1\035\054\041\065\051\063\052\070\055\067\056\061" +
    "\057\060\060\064\001\002\000\004\060\145\001\002\000" +
    "\016\017\uffbc\020\uffbc\021\uffbc\026\uffbc\027\uffbc\033\uffbc" +
    "\001\002\000\004\022\147\001\002\000\016\017\uffbb\020" +
    "\uffbb\021\uffbb\026\uffbb\027\uffbb\033\uffbb\001\002\000\032" +
    "\005\062\017\066\020\uffe1\021\055\035\054\041\065\051" +
    "\063\052\070\055\067\056\061\057\060\060\064\001\002" +
    "\000\036\005\062\017\066\021\055\022\uffe1\030\uffe1\035" +
    "\054\036\uffe1\041\065\051\063\052\070\055\067\056\061" +
    "\057\060\060\064\001\002\000\010\022\uffb4\030\uffb4\036" +
    "\uffb4\001\002\000\004\020\154\001\002\000\010\022\uffb3" +
    "\030\uffb3\036\uffb3\001\002\000\032\005\062\017\066\020" +
    "\uffe1\021\055\035\054\041\065\051\063\052\070\055\067" +
    "\056\061\057\060\060\064\001\002\000\004\020\157\001" +
    "\002\000\010\022\uffb1\030\uffb1\036\uffb1\001\002\000\032" +
    "\005\062\017\066\021\055\034\uffe1\035\054\041\065\051" +
    "\063\052\070\055\067\056\061\057\060\060\064\001\002" +
    "\000\004\022\162\001\002\000\010\022\uffae\030\uffae\036" +
    "\uffae\001\002\000\004\020\236\001\002\000\050\004\206" +
    "\005\200\006\201\007\203\010\165\011\170\012\205\013" +
    "\167\014\204\015\176\016\207\017\175\020\177\021\174" +
    "\026\202\027\173\031\172\037\166\040\171\001\002\000" +
    "\030\005\062\017\211\021\055\035\054\041\065\051\063" +
    "\052\070\055\067\056\061\057\060\060\064\001\002\000" +
    "\030\005\062\017\211\021\055\035\054\041\065\051\063" +
    "\052\070\055\067\056\061\057\060\060\064\001\002\000" +
    "\030\005\062\017\211\021\055\035\054\041\065\051\063" +
    "\052\070\055\067\056\061\057\060\060\064\001\002\000" +
    "\030\005\062\017\211\021\055\035\054\041\065\051\063" +
    "\052\070\055\067\056\061\057\060\060\064\001\002\000" +
    "\030\005\062\017\211\021\055\035\054\041\065\051\063" +
    "\052\070\055\067\056\061\057\060\060\064\001\002\000" +
    "\030\005\062\017\211\021\055\035\054\041\065\051\063" +
    "\052\070\055\067\056\061\057\060\060\064\001\002\000" +
    "\004\060\227\001\002\000\032\005\062\017\066\021\055" +
    "\022\uffe1\035\054\041\065\051\063\052\070\055\067\056" +
    "\061\057\060\060\064\001\002\000\032\005\062\017\066" +
    "\020\uffe1\021\055\035\054\041\065\051\063\052\070\055" +
    "\067\056\061\057\060\060\064\001\002\000\030\005\062" +
    "\017\211\021\055\035\054\041\065\051\063\052\070\055" +
    "\067\056\061\057\060\060\064\001\002\000\062\002\uffdd" +
    "\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012" +
    "\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd" +
    "\021\uffdd\022\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\034" +
    "\uffdd\036\uffdd\037\uffdd\040\uffdd\001\002\000\030\005\062" +
    "\017\211\021\055\035\054\041\065\051\063\052\070\055" +
    "\067\056\061\057\060\060\064\001\002\000\030\005\062" +
    "\017\211\021\055\035\054\041\065\051\063\052\070\055" +
    "\067\056\061\057\060\060\064\001\002\000\044\002\uffe1" +
    "\005\062\017\066\020\uffe1\021\055\022\uffe1\030\uffe1\034" +
    "\uffe1\035\054\036\uffe1\041\065\051\063\052\070\055\067" +
    "\056\061\057\060\060\064\001\002\000\030\005\062\017" +
    "\211\021\055\035\054\041\065\051\063\052\070\055\067" +
    "\056\061\057\060\060\064\001\002\000\030\005\062\017" +
    "\211\021\055\035\054\041\065\051\063\052\070\055\067" +
    "\056\061\057\060\060\064\001\002\000\030\005\062\017" +
    "\211\021\055\035\054\041\065\051\063\052\070\055\067" +
    "\056\061\057\060\060\064\001\002\000\030\005\062\017" +
    "\211\021\055\035\054\041\065\051\063\052\070\055\067" +
    "\056\061\057\060\060\064\001\002\000\030\005\062\017" +
    "\211\021\055\035\054\041\065\051\063\052\070\055\067" +
    "\056\061\057\060\060\064\001\002\000\044\002\uffd5\004" +
    "\206\005\200\006\201\007\203\010\165\017\175\020\uffd5" +
    "\021\174\022\uffd5\026\uffd5\027\173\030\uffd5\034\uffd5\036" +
    "\uffd5\037\uffd5\040\uffd5\001\002\000\030\005\062\017\211" +
    "\021\055\035\054\041\065\051\063\052\070\055\067\056" +
    "\061\057\060\060\064\001\002\000\046\004\206\005\200" +
    "\006\201\007\203\010\165\011\170\012\205\013\167\014" +
    "\204\015\176\016\207\017\175\020\177\021\174\027\173" +
    "\031\172\037\166\040\171\001\002\000\062\002\uffd2\004" +
    "\uffd2\005\uffd2\006\201\007\203\010\165\011\uffd2\012\uffd2" +
    "\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\175\020\uffd2\021" +
    "\174\022\uffd2\026\uffd2\027\173\030\uffd2\031\uffd2\034\uffd2" +
    "\036\uffd2\037\uffd2\040\uffd2\001\002\000\044\002\uffd8\004" +
    "\206\005\200\006\201\007\203\010\165\017\175\020\uffd8" +
    "\021\174\022\uffd8\026\uffd8\027\173\030\uffd8\034\uffd8\036" +
    "\uffd8\037\uffd8\040\uffd8\001\002\000\044\002\uffd3\004\206" +
    "\005\200\006\201\007\203\010\165\017\175\020\uffd3\021" +
    "\174\022\uffd3\026\uffd3\027\173\030\uffd3\034\uffd3\036\uffd3" +
    "\037\uffd3\040\uffd3\001\002\000\062\002\uffcf\004\uffcf\005" +
    "\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf" +
    "\014\uffcf\015\uffcf\016\uffcf\017\175\020\uffcf\021\174\022" +
    "\uffcf\026\uffcf\027\173\030\uffcf\031\uffcf\034\uffcf\036\uffcf" +
    "\037\uffcf\040\uffcf\001\002\000\016\002\uffdf\020\uffdf\022" +
    "\uffdf\030\uffdf\034\uffdf\036\uffdf\001\002\000\062\002\uffd0" +
    "\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012" +
    "\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017\175\020\uffd0" +
    "\021\174\022\uffd0\026\uffd0\027\173\030\uffd0\031\uffd0\034" +
    "\uffd0\036\uffd0\037\uffd0\040\uffd0\001\002\000\062\002\uffd1" +
    "\004\uffd1\005\uffd1\006\201\007\203\010\165\011\uffd1\012" +
    "\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\175\020\uffd1" +
    "\021\174\022\uffd1\026\uffd1\027\173\030\uffd1\031\uffd1\034" +
    "\uffd1\036\uffd1\037\uffd1\040\uffd1\001\002\000\044\002\uffd4" +
    "\004\206\005\200\006\201\007\203\010\165\017\175\020" +
    "\uffd4\021\174\022\uffd4\026\uffd4\027\173\030\uffd4\034\uffd4" +
    "\036\uffd4\037\uffd4\040\uffd4\001\002\000\004\020\224\001" +
    "\002\000\062\002\uffca\004\uffca\005\uffca\006\uffca\007\uffca" +
    "\010\uffca\011\uffca\012\uffca\013\uffca\014\uffca\015\uffca\016" +
    "\uffca\017\uffca\020\uffca\021\uffca\022\uffca\026\uffca\027\uffca" +
    "\030\uffca\031\uffca\034\uffca\036\uffca\037\uffca\040\uffca\001" +
    "\002\000\004\022\226\001\002\000\062\002\uffcb\004\uffcb" +
    "\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013" +
    "\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb" +
    "\022\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\034\uffcb\036" +
    "\uffcb\037\uffcb\040\uffcb\001\002\000\062\002\uffcc\004\uffcc" +
    "\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013" +
    "\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc" +
    "\022\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\034\uffcc\036" +
    "\uffcc\037\uffcc\040\uffcc\001\002\000\044\002\uffd6\004\206" +
    "\005\200\006\201\007\203\010\165\017\175\020\uffd6\021" +
    "\174\022\uffd6\026\uffd6\027\173\030\uffd6\034\uffd6\036\uffd6" +
    "\037\uffd6\040\uffd6\001\002\000\062\002\uffdc\004\206\005" +
    "\200\006\201\007\203\010\165\011\170\012\205\013\167" +
    "\014\204\015\176\016\207\017\175\020\uffdc\021\174\022" +
    "\uffdc\026\uffdc\027\173\030\uffdc\031\172\034\uffdc\036\uffdc" +
    "\037\uffdc\040\uffdc\001\002\000\044\002\uffd9\004\206\005" +
    "\200\006\201\007\203\010\165\017\175\020\uffd9\021\174" +
    "\022\uffd9\026\uffd9\027\173\030\uffd9\034\uffd9\036\uffd9\037" +
    "\uffd9\040\uffd9\001\002\000\044\002\uffd7\004\206\005\200" +
    "\006\201\007\203\010\165\017\175\020\uffd7\021\174\022" +
    "\uffd7\026\uffd7\027\173\030\uffd7\034\uffd7\036\uffd7\037\uffd7" +
    "\040\uffd7\001\002\000\062\002\uffdb\004\206\005\200\006" +
    "\201\007\203\010\165\011\170\012\205\013\167\014\204" +
    "\015\176\016\207\017\175\020\uffdb\021\174\022\uffdb\026" +
    "\uffdb\027\173\030\uffdb\031\172\034\uffdb\036\uffdb\037\uffdb" +
    "\040\uffdb\001\002\000\062\002\uffce\004\uffce\005\uffce\006" +
    "\uffce\007\uffce\010\uffce\011\uffce\012\uffce\013\uffce\014\uffce" +
    "\015\uffce\016\uffce\017\175\020\uffce\021\174\022\uffce\026" +
    "\uffce\027\173\030\uffce\031\uffce\034\uffce\036\uffce\037\uffce" +
    "\040\uffce\001\002\000\016\002\uffde\020\uffde\022\uffde\030" +
    "\uffde\034\uffde\036\uffde\001\002\000\062\002\uffda\004\uffda" +
    "\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013" +
    "\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda" +
    "\022\uffda\026\uffda\027\uffda\030\uffda\031\uffda\034\uffda\036" +
    "\uffda\037\uffda\040\uffda\001\002\000\006\020\ufff7\060\004" +
    "\001\002\000\004\020\242\001\002\000\006\021\243\034" +
    "\244\001\002\000\026\003\010\017\111\021\101\022\uffba" +
    "\035\076\046\110\047\112\050\105\053\075\060\106\001" +
    "\002\000\022\017\025\021\017\023\024\042\014\043\022" +
    "\044\015\045\020\060\021\001\002\000\006\021\246\034" +
    "\032\001\002\000\026\003\010\017\111\021\101\022\uffba" +
    "\035\076\046\110\047\112\050\105\053\075\060\106\001" +
    "\002\000\004\022\250\001\002\000\062\002\uffc2\004\uffc2" +
    "\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013" +
    "\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2" +
    "\022\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\034\uffc2\036" +
    "\uffc2\037\uffc2\040\uffc2\001\002\000\004\022\252\001\002" +
    "\000\062\002\uffc3\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010" +
    "\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3" +
    "\017\uffc3\020\uffc3\021\uffc3\022\uffc3\026\uffc3\027\uffc3\030" +
    "\uffc3\031\uffc3\034\uffc3\036\uffc3\037\uffc3\040\uffc3\001\002" +
    "\000\062\002\uffcd\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010" +
    "\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd" +
    "\017\uffcd\020\uffcd\021\uffcd\022\uffcd\026\uffcd\027\uffcd\030" +
    "\uffcd\031\uffcd\034\uffcd\036\uffcd\037\uffcd\040\uffcd\001\002" +
    "\000\004\022\255\001\002\000\062\002\uffc4\004\uffc4\005" +
    "\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4" +
    "\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022" +
    "\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\034\uffc4\036\uffc4" +
    "\037\uffc4\040\uffc4\001\002\000\032\005\062\017\066\020" +
    "\uffe1\021\055\035\054\041\065\051\063\052\070\055\067" +
    "\056\061\057\060\060\064\001\002\000\004\020\260\001" +
    "\002\000\062\002\uffc9\004\uffc9\005\uffc9\006\uffc9\007\uffc9" +
    "\010\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016" +
    "\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\026\uffc9\027\uffc9" +
    "\030\uffc9\031\uffc9\034\uffc9\036\uffc9\037\uffc9\040\uffc9\001" +
    "\002\000\012\002\ufffa\022\ufffa\030\ufffa\036\ufffa\001\002" +
    "\000\004\022\263\001\002\000\022\017\025\021\017\023" +
    "\024\042\014\043\022\044\015\045\020\060\021\001\002" +
    "\000\030\002\uffe3\020\uffe3\021\uffe3\022\uffe3\024\uffe3\026" +
    "\uffe3\030\uffe3\031\uffe3\033\uffe3\034\uffe3\036\uffe3\001\002" +
    "\000\012\002\ufff9\022\ufff9\030\ufff9\036\ufff9\001\002\000" +
    "\004\002\000\001\002\000\010\002\ufffe\003\010\060\004" +
    "\001\002\000\004\002\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\266\000\012\002\006\003\004\004\005\005\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\056\013\264\001\001\000\006\015\022\016\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\056\013\261\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\036\006\040\007\037\022\041\001\001\000\006" +
    "\015\026\016\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\032" +
    "\016\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\035\016\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\036\007\037\022\046" +
    "\001\001\000\010\005\036\007\037\022\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\050\016\015" +
    "\001\001\000\002\001\001\000\006\012\056\013\260\001" +
    "\001\000\006\012\056\013\055\001\001\000\002\001\001" +
    "\000\006\012\056\013\253\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\252\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\236\001\001\000\006\012\163\013\162\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\036\006" +
    "\071\007\037\022\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\004\106\005\010\010\101\011\076\014" +
    "\077\017\103\020\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\004" +
    "\106\005\010\010\101\011\076\014\077\017\140\020\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\056\013\117\001\001\000\006\011\113\014" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\116\014\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\121" +
    "\001\001\000\002\001\001\000\010\012\056\013\123\021" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\004\106\005\010\010\101\011\076\014" +
    "\077\017\127\020\102\001\001\000\002\001\001\000\010" +
    "\012\056\013\123\021\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\004\106\005\010\010\101\011\076" +
    "\014\077\017\134\020\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\004\106\005\010\010\137\011\076" +
    "\014\077\020\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\056\013\145\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\056\013\152\001\001\000\006" +
    "\012\056\013\151\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\056\013\155\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\056\013" +
    "\123\021\160\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\234\001" +
    "\001\000\004\012\233\001\001\000\004\012\232\001\001" +
    "\000\004\012\231\001\001\000\004\012\230\001\001\000" +
    "\004\012\227\001\001\000\002\001\001\000\006\012\056" +
    "\013\224\001\001\000\006\012\056\013\222\001\001\000" +
    "\004\012\221\001\001\000\002\001\001\000\004\012\220" +
    "\001\001\000\004\012\217\001\001\000\006\012\056\013" +
    "\216\001\001\000\004\012\215\001\001\000\004\012\214" +
    "\001\001\000\004\012\213\001\001\000\004\012\212\001" +
    "\001\000\004\012\207\001\001\000\002\001\001\000\004" +
    "\012\211\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\036\006\240\007\037\022\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\004\106\005" +
    "\010\010\101\011\076\014\077\017\250\020\102\001\001" +
    "\000\006\015\244\016\015\001\001\000\002\001\001\000" +
    "\020\004\106\005\010\010\101\011\076\014\077\017\246" +
    "\020\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\056\013\256\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\263\016\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\267\004\005\005\010\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= decls 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "program([" + val + "])"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // decls ::= decl 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val;                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // decls ::= decl P_VIRG 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = val;                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decls ::= decl P_VIRG decls 
            {
              String RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val1 + "," + val2;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl ::= ids DPONTOS type 
            {
              String RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  "var_def([" + val1 + "]," + val2 + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decl ::= ids DPONTOS type DPIGUAL exp 
            {
              String RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  "var_def([" + val1 + "]," + val2 + "," + val3 + "), assign([" + val1 + "]," 
	              + val3 + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decl ::= ids DPONTOS type IGUAL exp 
            {
              String RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "cnst_def([" + val1 + "]," + val2 + "," + val3 + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decl ::= ids IGUAL exp 
            {
              String RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "cnst_def([" + val1 + "]," + val2 + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decl ::= error 
            {
              String RESULT =null;
		 RESULT = "erro()"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // formals ::= 
            {
              String RESULT =null;
		 RESULT = "";  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formals",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // formals ::= non_empty_formals 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formals",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // non_empty_formals ::= formal_decl 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val; 	        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_empty_formals",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // non_empty_formals ::= formal_decl VIRG non_empty_formals 
            {
              String RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val1 + "," + val2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_empty_formals",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // non_empty_formals ::= formal_decl P_VIRG non_empty_formals 
            {
              String RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val1 + "," + val2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_empty_formals",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // formal_decl ::= ids 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "imp_type([" + val                + "])"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_decl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // formal_decl ::= ids DPONTOS type 
            {
              String RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "exp_type([" + val1 + "]," + val2 +  ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_decl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ids ::= ID 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "name(" + val  + ")" ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ids ::= ID VIRG ids 
            {
              String RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "name(" + val1 + ")," + val2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type ::= single_type 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= PAR_E PAR_D 
            {
              String RESULT =null;
		 RESULT = "type(void)"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= PAR_E type PAR_D 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "type(tuple,[" + val + "])"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= single_type VIRG type 
            {
              String RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val1 + "," + val2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // single_type ::= PAR_E single_type PAR_D 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("single_type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // single_type ::= ID 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "type(" + val + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("single_type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // single_type ::= INT 
            {
              String RESULT =null;
		 RESULT = "type(int)" ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("single_type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // single_type ::= REAL 
            {
              String RESULT =null;
		 RESULT = "type(real)"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("single_type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // single_type ::= BOOL 
            {
              String RESULT =null;
		 RESULT = "type(bool)"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("single_type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // single_type ::= VOID 
            {
              String RESULT =null;
		 RESULT = "type(void)"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("single_type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // single_type ::= type IMPLICA type 
            {
              String RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "type(func,"   + val1 + "," + val2 + ")" ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("single_type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // single_type ::= PARR_E exp PARR_D type 
            {
              String RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "type(array,"  + val1 + "," + val2 + ")" ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("single_type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // single_type ::= CHAV_E formals CHAV_D 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "type(class,[" + val               + "])"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("single_type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= sexp 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= sexp VIRG exp 
            {
              String RESULT =null;
		int oper1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oper1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String oper1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oper2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oper2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String oper2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = oper1 + "," + oper2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= PAR_E exp PAR_D 
            {
              String RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String oper = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "lit(tuple,[" + oper + "])"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sexp ::= PAR_E sexp PAR_D 
            {
              String RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String oper = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = oper; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sexp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sexp ::= sexp OR sexp 
            {
              String RESULT =null;
		int oper1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oper1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String oper1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oper2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oper2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String oper2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "op(or,"  + oper1 + "," + oper2 + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sexp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sexp ::= sexp AND sexp 
            {
              String RESULT =null;
		int oper1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oper1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String oper1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oper2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oper2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String oper2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "op(and," + oper1 + "," + oper2 + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sexp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sexp ::= NOT sexp 
            {
              String RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int operright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String oper = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "op(not," + oper  +               ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sexp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sexp ::= sexp MENOR sexp 
            {
              String RESULT =null;
		int oper1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oper1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String oper1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oper2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oper2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String oper2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "op(menor,"   + oper1 + "," + oper2 + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sexp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sexp ::= sexp MENOR_I sexp 
            {
              String RESULT =null;
		int oper1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oper1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String oper1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oper2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oper2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String oper2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "op(menor_i," + oper1 + "," + oper2 + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sexp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sexp ::= sexp IGUALIGUAL sexp 
            {
              String RESULT =null;
		int oper1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oper1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String oper1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oper2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oper2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String oper2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "op(igual,"   + oper1 + "," + oper2 + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sexp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sexp ::= sexp IGUAL sexp 
            {
              String RESULT =null;
		int oper1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oper1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String oper1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oper2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oper2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String oper2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "op(igual,"   + oper1 + "," + oper2 + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sexp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sexp ::= sexp DIF sexp 
            {
              String RESULT =null;
		int oper1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oper1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String oper1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oper2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oper2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String oper2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "op(dif,"     + oper1 + "," + oper2 + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sexp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sexp ::= sexp MAIOR_I sexp 
            {
              String RESULT =null;
		int oper1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oper1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String oper1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oper2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oper2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String oper2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "op(maior_i," + oper1 + "," + oper2 + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sexp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sexp ::= sexp MAIOR sexp 
            {
              String RESULT =null;
		int oper1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oper1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String oper1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oper2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oper2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String oper2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "op(maior," + oper1 + "," + oper2 + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sexp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sexp ::= sexp SOMA sexp 
            {
              String RESULT =null;
		int oper1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oper1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String oper1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oper2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oper2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String oper2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "op(soma,"  + oper1 + "," + oper2 + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sexp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sexp ::= sexp SUB sexp 
            {
              String RESULT =null;
		int oper1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oper1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String oper1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oper2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oper2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String oper2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "op(sub,"   + oper1 + "," + oper2 + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sexp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sexp ::= sexp MULT sexp 
            {
              String RESULT =null;
		int oper1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oper1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String oper1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oper2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oper2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String oper2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "op(mult,"  + oper1 + "," + oper2 + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sexp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sexp ::= sexp DIV sexp 
            {
              String RESULT =null;
		int oper1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oper1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String oper1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oper2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oper2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String oper2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "op(div,"   + oper1 + "," + oper2 + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sexp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sexp ::= sexp MOD sexp 
            {
              String RESULT =null;
		int oper1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oper1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String oper1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oper2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oper2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String oper2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "op(mod,"   + oper1 + "," + oper2 + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sexp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sexp ::= SUB sexp 
            {
              String RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int operright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String oper = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "op(menos," + oper  + 		     ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sexp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sexp ::= sexp PONTO ID 
            {
              String RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  "qual_name(" + val1 + "," + val2  + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sexp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sexp ::= sexp PARR_E exp PARR_D 
            {
              String RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =  "array_ref(" + val1 + "," + val2  + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sexp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sexp ::= sexp PAR_E exp PAR_D 
            {
              String RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =   "func_ref(" + val1 + ",args([" + val2 +"]))"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sexp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sexp ::= RECURS PAR_E exp PAR_D 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "r_func_ref(args([" + val                + "]))"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sexp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sexp ::= ID 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "name("      + val  + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sexp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sexp ::= INT_LIT 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "lit(int,"   + val  + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sexp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sexp ::= REAL_LIT 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "lit(real,"  + val  + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sexp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // sexp ::= BOOL_LIT 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "lit(bool,"  + val  + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sexp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sexp ::= PARR_E exp PARR_D 
            {
              String RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String oper = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "lit(array,[" + oper + "])"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sexp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sexp ::= MAP PAR_E formals PAR_D PARR_E stats PARR_D 
            {
              String RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "lit(map, par([" + val1 + "]), stats([" + val2 + "]))"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sexp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sexp ::= MAP PAR_E formals PAR_D IMPLICA type PARR_E stats PARR_D 
            {
              String RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int val3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int val3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String val3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "lit(map, par([" + val1 + "])," + val2 + ", stats([" + val3 + "]))"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sexp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sexp ::= CLASS PAR_E formals PAR_D PARR_E stats PARR_D 
            {
              String RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "lit(class, par([" + val1 + "]), stats([" + val2 + "]))"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sexp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // primary ::= prim 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val;                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // primary ::= primary VIRG primary 
            {
              String RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val1 + "," + val2;           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // primary ::= PAR_E primary PAR_D 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "name_tuple([" + val + "])"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // prim ::= ID 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =       "name(" + val +               ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prim",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // prim ::= prim PONTO ID 
            {
              String RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  "qual_name(" + val1 + "," + val2 + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prim",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // prim ::= prim PARR_E exp PARR_D 
            {
              String RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =  "array_ref(" + val1 + "," + val2 + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prim",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // stats ::= 
            {
              String RESULT =null;
		 RESULT = "";  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stats",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // stats ::= non_empty_stats 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stats",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // non_empty_stats ::= stat 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val;               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_empty_stats",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // non_empty_stats ::= stat P_VIRG 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = val;               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_empty_stats",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // non_empty_stats ::= stat P_VIRG non_empty_stats 
            {
              String RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val1 + "," + val2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_empty_stats",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // stat ::= decl 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val				         ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // stat ::= primary DPIGUAL exp 
            {
              String RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =    "assign([" + val1 + "],"  + val2  + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // stat ::= primary PAR_E exp PAR_D 
            {
              String RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "func_call(" + val1 + ",args([" + val2  +"]))"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // stat ::= RETURN exp 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =    "return(" + val  	            + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // stat ::= RECURS PAR_E exp PAR_D 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "r_func_call(args([" + val       + "]))"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // stat ::= BREAK 
            {
              String RESULT =null;
		 RESULT =      "break";         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // stat ::= COND PARR_E clauses PARR_D 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =      "cond(" + val 	            + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // stat ::= WHILE PARR_E clauses PARR_D 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =     "while(" + val 	            + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // stat ::= PARR_E stats PARR_D 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "block([" + val + "])"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // clauses ::= exp IMPLICA stats 
            {
              String RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "clauses(" + val1 + ",stats([" + val2 + "]))"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clauses",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // clauses ::= exp IMPLICA stats BARRA_V clauses 
            {
              String RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "clauses(" + val1 + ",stats([" + val2 + "])," + val3 + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clauses",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // clauses ::= exp IMPLICA stats BARRA_V ELSE IMPLICA stats 
            {
              String RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int val3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "clauses(" + val1 + ",stats([" + val2 + "]),stats([" + val3 + "]))"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clauses",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
